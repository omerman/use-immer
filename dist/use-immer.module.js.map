{"version":3,"file":"use-immer.module.js","sources":["../src/index.ts"],"sourcesContent":["import produce, { Draft, nothing } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type Reducer<S = any, A = any> = (\n  draftState: Draft<S>,\n  action: A\n) => void | (S extends undefined ? typeof nothing : S);\n\nexport type Updater<S> = (f: ((draft: Draft<S>) => void) | S) => S;\n\nexport type ImmerHook<S> = [S, Updater<S>];\n\nexport function useImmer<S = any>(initialValue: S | (() => S)): ImmerHook<S>;\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(initialValue);\n  return [\n    val,\n    useCallback((updater) => {\n      if (typeof updater === \"function\") {\n        let nextValue: any;\n        updateValue((curr: any) => {\n          nextValue = produce(curr, updater);\n          return nextValue;\n        });\n        return nextValue;\n      } else {\n        const nextValue = updater;\n        updateValue(nextValue);\n        return nextValue;\n      }\n    }, []),\n  ];\n}\n\nexport function useImmerReducer<S = any, A = any>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  initialAction?: (initial: any) => S\n): [S, Dispatch<A>];\nexport function useImmerReducer(\n  reducer: any,\n  initialState: any,\n  initialAction: any\n) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initialState as any, initialAction);\n}\n"],"names":["useImmer","initialValue","useState","updateValue","useCallback","updater","nextValue","curr","produce","useImmerReducer","reducer","initialState","initialAction","cachedReducer","useMemo","useReducer"],"mappings":"6GAcgBA,EAASC,SACIC,EAASD,GAAxBE,OACZ,MAAO,MAELC,EAAY,SAACC,GAET,IAAIC,EADN,GAAuB,mBAAZD,EAMT,OAJAF,EAAY,SAACI,GAEX,OADAD,EAAYE,EAAQD,EAAMF,KAGrBC,EAEP,IAAMA,EAAYD,EAElB,OADAF,EAAYG,GACLA,GAER,cASSG,EACdC,EACAC,EACAC,GAEA,IAAMC,EAAgBC,EAAQ,kBAAMN,EAAQE,IAAU,CAACA,IACvD,OAAOK,EAAWF,EAAeF,EAAqBC"}